import { useNuxt, createResolver, addTemplate, defineNuxtModule, useLogger, addImports, addComponent, addPlugin, addServerHandler, addPrerenderRoutes } from '@nuxt/kit';
import { initSiteConfig, updateSiteConfig, useSiteConfig } from 'nuxt-site-config-kit';
import { relative } from 'pathe';

function extendTypes(module, template) {
  const nuxt = useNuxt();
  const { resolve } = createResolver(import.meta.url);
  addTemplate({
    filename: `module/${module}.d.ts`,
    getContents: async () => {
      const typesPath = relative(resolve(nuxt.options.rootDir, nuxt.options.buildDir, "module"), resolve("runtime/types"));
      const s = await template({ typesPath });
      return `// Generated by ${module}
${s}
export {}
`;
    }
  });
  nuxt.hooks.hook("prepare:types", ({ references }) => {
    references.push({ path: resolve(nuxt.options.buildDir, `module/${module}.d.ts`) });
  });
}

const processShim = typeof process !== "undefined" ? process : {};
const envShim = processShim.env || {};
const module = defineNuxtModule({
  meta: {
    name: "nuxt-site-config",
    compatibility: {
      nuxt: "^3.6.0",
      bridge: false
    },
    configKey: "site"
  },
  defaults(nuxt) {
    return {
      debug: nuxt.options.debug || false
    };
  },
  async setup(config, nuxt) {
    const logger = useLogger("nuxt-site-config");
    logger.level = config.debug ? 4 : 3;
    const { resolve } = createResolver(import.meta.url);
    await initSiteConfig();
    nuxt.hook("modules:done", async () => {
      await updateSiteConfig({
        _context: "nuxt:config:site",
        ...config
      });
      const runtimeConfig = nuxt.options.runtimeConfig;
      function getRuntimeConfig(config2) {
        return runtimeConfig[`site${config2}`] || runtimeConfig.public?.[`site${config2}`];
      }
      function getEnv(config2) {
        const env = config2.toUpperCase();
        if (envShim[`NUXT_SITE_${env}`])
          return envShim[`NUXT_SITE_${env}`];
        if (envShim[`NUXT_PUBLIC_SITE_${env}`])
          return envShim[`NUXT_PUBLIC_SITE_${env}`];
      }
      updateSiteConfig({
        _context: "env",
        url: getEnv("Url"),
        name: getEnv("Name"),
        description: getEnv("Description"),
        logo: getEnv("Image"),
        defaultLocale: getEnv("Language"),
        indexable: getEnv("Indexable")
      });
      updateSiteConfig({
        _context: "runtimeConfig",
        url: getRuntimeConfig("Url"),
        name: getRuntimeConfig("Name"),
        description: getRuntimeConfig("Description"),
        logo: getRuntimeConfig("Image"),
        defaultLocale: getRuntimeConfig("Language"),
        indexable: getRuntimeConfig("Indexable")
      });
      updateSiteConfig({
        _context: "runtimeConfig",
        ...nuxt?.options.runtimeConfig.public.site || {}
      });
      const siteConfig = useSiteConfig();
      await nuxt.callHook("site-config:resolve", siteConfig);
      nuxt.options.runtimeConfig.public.site = siteConfig;
    });
    extendTypes("nuxt-site-config", async ({ typesPath }) => {
      return `
declare module 'nitropack' {
  interface NitroRouteRules {
    site?: import('${typesPath}').SiteConfigInput
  }
  interface NitroRouteConfig {
    site?: import('${typesPath}').SiteConfig
  }
}

declare module 'h3' {
  interface H3EventContext {
    siteConfig: import('${typesPath}').SiteConfigStack
  }
}

declare module 'nuxt/schema' {
  interface AppConfigInput {
    /** Theme configuration */
    site?: import('${typesPath}').SiteConfigInput
  }
}

declare module '@nuxt/schema' {
  interface AppConfigInput {
    /** Theme configuration */
    site?: import('${typesPath}').SiteConfigInput
  }
  interface Nuxt {
    _siteConfig?: import('${typesPath}').SiteConfigStack
  }
}

declare module '@nuxt/schema' {
  export interface RuntimeNuxtHooks {
    'site-config:resolve': (siteConfig: import('${typesPath}').SiteConfig) => void
  }
}
`;
    });
    const composables = ["useSiteConfig", "updateSiteConfig", "useNitroOrigin"];
    composables.forEach((c) => {
      addImports({
        from: resolve(`./runtime/composables/${c}`),
        name: c
      });
    });
    const linkComposables = ["createSitePathResolver", "withSiteTrailingSlash", "withSiteUrl"];
    linkComposables.forEach((c) => {
      addImports({
        from: resolve("./runtime/composables/utils"),
        name: c
      });
    });
    await addComponent({
      filePath: resolve("./runtime/component/SiteLink.vue"),
      name: "SiteLink"
    });
    if (process.env.playground)
      nuxt.options.alias["site-config-stack"] = resolve("../../site-config/src/index");
    nuxt.options.nitro.imports = nuxt.options.nitro.imports || {};
    nuxt.options.nitro.imports.imports = nuxt.options.nitro.imports.imports || [];
    nuxt.options.nitro.imports.imports.push(...[
      {
        as: "useSiteConfig",
        name: "useSiteConfig",
        from: resolve("./runtime/nitro/composables/useSiteConfig")
      },
      {
        as: "useNitroOrigin",
        name: "useNitroOrigin",
        from: resolve("./runtime/nitro/composables/useNitroOrigin")
      },
      {
        as: "updateSiteConfig",
        name: "updateSiteConfig",
        from: resolve("./runtime/nitro/composables/updateSiteConfig")
      },
      {
        as: "withSiteUrl",
        name: "withSiteUrl",
        from: resolve("./runtime/nitro/composables/utils")
      },
      {
        as: "withSiteTrailingSlash",
        name: "withSiteTrailingSlash",
        from: resolve("./runtime/nitro/composables/utils")
      },
      {
        as: "createSitePathResolver",
        name: "createSitePathResolver",
        from: resolve("./runtime/nitro/composables/utils")
      }
    ]);
    nuxt.options.build.transpile.push("site-config-stack");
    addPlugin({
      src: resolve("./runtime/plugins/siteConfig")
    });
    addServerHandler({
      middleware: true,
      handler: resolve("./runtime/nitro/middleware/init")
    });
    if (config.debug) {
      addServerHandler({
        route: "/api/__site-config__/debug",
        handler: resolve("./runtime/nitro/routes/debug")
      });
      addPrerenderRoutes("/api/__site-config__/debug");
    }
  }
});

export { module as default, envShim, processShim };
