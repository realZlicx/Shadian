import { SiteConfigInput, SiteConfigStack, SiteConfig } from 'site-config-stack';
export { SiteConfig, SiteConfigInput, SiteConfigStack } from 'site-config-stack';
import * as _nuxt_schema from '@nuxt/schema';
import { Nuxt } from '@nuxt/schema';

type AssertionModes = 'prerender' | 'generate' | 'build';
interface ModuleAssertion {
    context: string;
    requirements: Partial<Record<keyof SiteConfigInput, string>>;
}
declare module '@nuxt/schema' {
    interface AppConfigInput {
        /** Theme configuration */
        site?: SiteConfigInput;
    }
    interface Nuxt {
        _siteConfig?: SiteConfigStack;
        _siteConfigAsserts?: Partial<Record<Partial<AssertionModes>, ModuleAssertion[]>>;
    }
}

declare function initSiteConfig(nuxt?: Nuxt | null): Promise<SiteConfigStack | undefined>;
declare function installNuxtSiteConfig(nuxt?: Nuxt | null): Promise<void>;
declare function updateSiteConfig(input: SiteConfigInput, nuxt?: Nuxt | null): void;
declare function useSiteConfig(context?: {
    path: string;
}, nuxt?: Nuxt | null): SiteConfig;

declare function requireSiteConfig(context: string, requirements: Partial<Record<keyof SiteConfig, string>>, modes: Partial<Record<AssertionModes, boolean>>): void;
declare function assertSiteConfig(mode: AssertionModes, options?: {
    throwError?: boolean;
    logErrors?: boolean;
}): Promise<{
    valid: boolean;
    messages: string[];
}>;

declare function useNitroOrigin(): string;
declare function withSiteUrl(path: string, options?: {
    withBase?: boolean;
    throwErrorOnMissingSiteUrl?: boolean;
}): string;
declare function withSiteTrailingSlash(path: string): string;
declare function createSitePathResolver(options?: {
    canonical?: boolean;
    absolute?: boolean;
    withBase?: boolean;
}, nuxt?: _nuxt_schema.Nuxt): (path: string) => string;

export { AssertionModes, ModuleAssertion, assertSiteConfig, createSitePathResolver, initSiteConfig, installNuxtSiteConfig, requireSiteConfig, updateSiteConfig, useNitroOrigin, useSiteConfig, withSiteTrailingSlash, withSiteUrl };
