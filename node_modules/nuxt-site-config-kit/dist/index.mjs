import { tryUseNuxt, installModule, resolvePath, useNuxt, useLogger } from '@nuxt/kit';
import { readPackageJSON } from 'pkg-types';
import { createSiteConfigStack, resolveSitePath, fixSlashes } from 'site-config-stack';
import { withoutProtocol } from 'ufo';

const processShim = typeof process !== "undefined" ? process : {};
const envShim = processShim.env || {};
const DefaultSiteConfig = {
  _context: "defaults",
  defaultLocale: "en",
  trailingSlash: false,
  titleSeparator: "|"
};
const VendorEnv = {
  _context: "vendorEnv",
  url: [
    // vercel
    envShim.VERCEL_URL,
    envShim.NUXT_ENV_VERCEL_URL,
    // netlify
    envShim.URL,
    // cloudflare pages
    envShim.CF_PAGES_URL
  ].find((k) => Boolean(k)),
  name: [
    // vercel
    envShim.NUXT_ENV_VERCEL_GIT_REPO_SLUG,
    // netlify
    envShim.SITE_NAME
  ].find((k) => Boolean(k))
};

async function getPkgJsonContextConfig(rootDir) {
  const pkgJson = await readPackageJSON(void 0, { startingFrom: rootDir });
  if (!pkgJson)
    return {};
  return {
    _context: "package.json",
    name: pkgJson.name,
    description: pkgJson.description
  };
}
async function initSiteConfig(nuxt = tryUseNuxt()) {
  if (!nuxt)
    return;
  let siteConfig = nuxt._siteConfig;
  if (siteConfig)
    return siteConfig;
  siteConfig = createSiteConfigStack();
  siteConfig.push(DefaultSiteConfig);
  const rootDir = nuxt?.options.rootDir || process.cwd();
  const isNodeEnv = !!envShim.NODE_ENV;
  siteConfig.push({
    _context: "system",
    name: rootDir.split("/").pop(),
    indexable: isNodeEnv ? envShim.NODE_ENV === "production" : !process.dev
  });
  siteConfig.push(await getPkgJsonContextConfig(rootDir));
  siteConfig.push(VendorEnv);
  nuxt._siteConfig = siteConfig;
  return siteConfig;
}
async function installNuxtSiteConfig(nuxt = tryUseNuxt()) {
  await installModule(await resolvePath("nuxt-site-config"));
  await initSiteConfig(nuxt);
}
function getSiteConfigStack(nuxt = tryUseNuxt()) {
  if (!nuxt)
    throw new Error("Nuxt context is missing.");
  if (!nuxt._siteConfig)
    throw new Error("Site config is not initialized. Make sure you are running your module after nuxt-site-config.");
  return nuxt._siteConfig;
}
function updateSiteConfig(input, nuxt = tryUseNuxt()) {
  const container = getSiteConfigStack(nuxt);
  container.push(input);
}
function useSiteConfig(context, nuxt = tryUseNuxt()) {
  const container = getSiteConfigStack(nuxt);
  return container.get();
}

function requireSiteConfig(context, requirements, modes) {
  const nuxt = tryUseNuxt();
  if (!nuxt)
    return;
  const assertions = nuxt._siteConfigAsserts || {};
  Object.keys(modes).forEach((mode) => {
    const key = mode;
    if (!modes[key])
      return;
    assertions[key] = assertions[key] || [];
    assertions[key].push({ context, requirements });
  });
  nuxt._siteConfigAsserts = assertions;
}
async function assertSiteConfig(mode, options) {
  const siteConfig = await useSiteConfig();
  const nuxt = useNuxt();
  let valid = true;
  const messages = [];
  const logger = useLogger("nuxt-site-config");
  const assertions = nuxt._siteConfigAsserts?.[mode] || false;
  if (!assertions)
    return { valid, messages };
  assertions.forEach(({ context, requirements }) => {
    Object.keys(requirements).forEach((k) => {
      const key = k;
      if (!siteConfig[key]) {
        const msg = `\`${context}\` requires \`${key}\` to be set. ${requirements[key]}`;
        messages.push(msg);
        if (options?.logErrors !== false)
          logger.error(msg);
        valid = false;
      }
    });
  });
  if (!valid && options?.throwError !== false)
    throw new Error(`Missing site config for ${mode} mode.`);
  return {
    valid,
    messages
  };
}

function useNitroOrigin() {
  const cert = process.env.NITRO_SSL_CERT;
  const key = process.env.NITRO_SSL_KEY;
  let host = process.env.NITRO_HOST || process.env.HOST || false;
  let port = process.env.NITRO_PORT || process.env.PORT || (process.dev ? 3e3 : false);
  let protocol = cert && key || !process.dev ? "https" : "http";
  if ((process.dev || process.env.prerender) && process.env.NUXT_VITE_NODE_OPTIONS) {
    const origin = JSON.parse(process.env.NUXT_VITE_NODE_OPTIONS).baseURL.replace("/__nuxt_vite_node__", "");
    host = withoutProtocol(origin);
    protocol = origin.includes("https") ? "https" : "http";
  }
  if (typeof host === "string" && host.includes(":")) {
    port = host.split(":").pop();
    host = host.split(":")[0];
  }
  port = port ? `:${port}` : "";
  return `${protocol}://${host}${port}/`;
}
function withSiteUrl(path, options = {}) {
  const siteConfig = useSiteConfig();
  if (!siteConfig.url && options.throwErrorOnMissingSiteUrl)
    throw new Error("Missing url in site config. Please add `{ site: { url: <url> } }` to nuxt.config.ts.");
  const nuxt = useNuxt();
  const base = nuxt.options.app.baseURL || nuxt.options.nitro.baseURL || "/";
  return resolveSitePath(path, {
    absolute: true,
    siteUrl: siteConfig.url || "",
    trailingSlash: siteConfig.trailingSlash,
    base,
    withBase: options.withBase
  });
}
function withSiteTrailingSlash(path) {
  const siteConfig = useSiteConfig();
  return fixSlashes(siteConfig.trailingSlash, path);
}
function createSitePathResolver(options = {}, nuxt = useNuxt()) {
  const siteConfig = useSiteConfig();
  const nitroOrigin = useNitroOrigin();
  const canUseSiteUrl = (options.canonical !== false || process.env.prerender) && siteConfig.url;
  const nuxtBase = nuxt.options.app.baseURL || "/";
  return (path) => {
    return resolveSitePath(path, {
      ...options,
      siteUrl: canUseSiteUrl ? siteConfig.url : nitroOrigin,
      trailingSlash: siteConfig.trailingSlash,
      base: nuxtBase
    });
  };
}

export { assertSiteConfig, createSitePathResolver, initSiteConfig, installNuxtSiteConfig, requireSiteConfig, updateSiteConfig, useNitroOrigin, useSiteConfig, withSiteTrailingSlash, withSiteUrl };
